#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(:config require_order pass_through bundling);
use Term::ProgressBar;
use Time::HiRes;
use File::Temp;
use File::Spec::Functions qw(catfile);
use POSIX qw(mkfifo);

sub print_usage {
    my $message = $_[0];
    if (defined($message)) {
        print $message;
        if ($message !~ /^\n\{0,1,2\}$/) {
            print "\n\n";
        }
    }

    my $self = $0;
    $self =~ s%^.*/%%;

    print <<EOF;
Usage: $self [-o OUTPUT] [INPUT]

Queries boxbackup for a full file listing and feeds it into `ncdu' to visualize
the disk usage on the backup server.

To execute `bbackupquery', boxdu usually requires to be run with root
privileges. This is not the case if an input file containing a previously
created file listing is provided.

If a JSON export is requested using --output, `ncdu' will not be executed.
Use `ncdu -f <OUTPUT>' to examine the exported data.

Set environment variables BOXDU_BBACKUPQUERY or BOXDU_NCDU to override default
binary paths to bbackupquery or ncdu respectively.

Available options:
    -o FILE, --output FILE      Export JSON data to FILE
    -v, --verbose               Be verbose
    -d, --debug                 Debug output (execution time measurements)
    -q, --quiet                 Suppress progress indication
    -h, --help                  Print this help
EOF

    exit(1);
}


my ($output, $verbose, $debug, $quiet, $help, $directory, $bbackupquery_path, $ncdu_path);
GetOptions(
    'o|output=s'    => \$output,
    'v|verbose'     => \$verbose,
    'd|debug'       => \$debug,
    'q|quiet'       => \$quiet,
    'h|help'        => \$help,
) or print_usage();

if ($help) {
    print_usage();
}

sub verbose {
    print STDERR @_ if $verbose;
}

my $times = {};
sub start {
    $times->{$_[0]} -= Time::HiRes::gettimeofday();
}
sub end {
    $times->{$_[0]} += Time::HiRes::gettimeofday();
}


my $input = $ARGV[0];
my $inputfh;
if (defined($ARGV[0])) {
    # Input file is given
    if ($input eq '-') {
        verbose("Reading file listing from standard input\n");
        open($inputfh, '<-')
            or die("Failed to open standard input for reading: $!");
    } else {
        verbose("Reading input from `$input'\n");
        open($inputfh, '<', $input)
            or die("boxdu: open: $input: $!");
    }
} else {
    # No input specified, run bbackupquery ourselves
    my $querybin = defined($ENV{BOXDU_BBACKUPQUERY}) ? $ENV{BOXDU_BBACKUPQUERY} : '/usr/sbin/bbackupquery';
    my @cmd = ($querybin,  'list -r -d -o -s', 'quit');
    verbose("Running command: " . join(' ', @cmd) . "\n");
    open($inputfh, '-|', @cmd)
        or die("Failed to run bbackupquery");
}

my @filelist = <$inputfh>;
close($inputfh);

# Skip well-known header lines in bbackupquery output
sub veriline {
    my $listref = shift;
    my $regex = shift;
    my $linenum = shift;
    if (@$listref[0] =~ m/$regex/) {
        shift(@$listref);
    } else {
        die("Unexpected input in line $linenum");
    }
}

my $linenum = 1;
veriline(\@filelist, '^NOTICE:', $linenum++);
veriline(\@filelist, '^Login complete.$', $linenum++);
veriline(\@filelist, '^$', $linenum++);
veriline(\@filelist, '^Type "help"', $linenum++);
veriline(\@filelist, '^$', $linenum++);

my $roots = {
    'current' => {},
    'deleted' => {},
    'unclear' => {},
    'old' => {}
};

my $joblength = $#filelist;
my $progress;
unless ($quiet) {
    $progress = Term::ProgressBar->new({name => 'Parsing', count => $joblength, ETA => 'linear'});
    $progress->minor(0);
}
    my $progress_nextupdate = 0;

# Use cache to speed up tree traversals
# Note: this simple cache is actually more efficient than additionally storing
# pointers to all intermediate path components.
my $pathcache = {
    'current' => [],
    'deleted' => [],
    'unclear' => [],
    'old' => []
};
my $cachehits = 0;
my $cachemisses = 0;

start('parse') if $debug;
for (my $i = 0; $i <= $#filelist; $i++) {
    if (!$quiet && $i >= $progress_nextupdate) {
        $progress_nextupdate = $progress->update($i);
    }

    start('parse_parsing') if $debug;
    chomp($filelist[$i]);
    my ($id, $flags, $size, $path) = split(/ /, $filelist[$i], 4);
    my @dirs = split(/\//, $path);
    my $pathprefix = join('/', @dirs[0..$#dirs - 1]);
    end('parse_parsing') if $debug;

    my $root = 'current';
    if ($flags =~ /X/) {
        $root = 'deleted';
    } elsif ($flags =~ /a/) {
        $root = 'unclear';
    } elsif ($flags =~ /o/) {
        $root = 'old';
    }

    if ($debug && $flags =~ /R/) {
        print STDERR "Unexpected: has flag R: $path\n";
    }

    if ($size == 0) {
        # skip directories (and empty files?)
        next;
    }

    # Traverse hash for all but last directory tokens in given path
    start('parse_traverse') if $debug;
    my $tmp;
    if (@{$pathcache->{$root}} && $pathprefix eq $pathcache->{$root}->[0]) {
        $tmp = $pathcache->{$root}->[1];
        $cachehits++ if $debug;
    } else {
        $cachemisses++ if $debug;
        $tmp = $roots->{$root};
        for (my $d = 0; $d < $#dirs; $d++) {
            # print("dirs[d] = " . $dirs[$d] . ", tmp=$tmp\n");
            my $dir = $dirs[$d];
            if (!exists($tmp->{$dir})) {
                $tmp->{$dir} = {};
            }
            $tmp = $tmp->{$dir};
        }
        $pathcache->{$root} = [$pathprefix, $tmp];
    }

    end('parse_traverse') if $debug;

    # Only check input sanity if debugging is enabled
    if ($debug && exists($tmp->{$dirs[-1]})) {
        if (ref($tmp->{$dirs[-1]}) eq 'HASH') {
            print STDERR "Hash reference unexpectedly found a leaf node in tree '$root': $path\n";
            next;
        }
        if ($root eq 'current') {
            print STDERR "Path collision with previously seen file in tree '$root': $path\n";
            next;
        }
    }

    # Note: Initialization not necessary thanks to autovivification
    # if (!exists($tmp->{$dirs[-1]})) {
        #$tmp->{$dirs[-1]} = 0;
    # }

    # leaf node points to file size (build cumulative sum in case of deleted or old versions)  
    $tmp->{$dirs[-1]} += $size * 4096;
}
end('parse') if $debug;

unless ($quiet) {
    $progress->update($joblength);
    print("\n");
}

my $cachetotal = $cachehits + $cachemisses;
printf("Path cache hits: %.1f%%\n", $cachehits / $cachetotal * 100) if $debug;
printf("Path cache misses: %.1f%%\n", $cachemisses / $cachetotal * 100) if $debug;

use Data::Dumper;

my $outputfh;
my $runncdu = 0;
if (defined($output)) {
    # Write JSON to file
    open($outputfh, '>', $output)
        or die("boxdu: open: $output: $!");
} else {
    # Feed JSON to ncdu via temporary file

    # my $tempdir = File::Temp::tempdir('boxduXXXXXX', CLEANUP => 1);
    # my $tempfifo = catfile($tempdir, "ncdu");
    # mkfifo($tempfifo, 0700) or die "boxdu: mkfifo: $tempfifo: $!";

    $runncdu = 1;
    ($outputfh, $output) = File::Temp::tempfile('/tmp/boxdu.XXXXXX', UNLINK => 1);
}

verbose("Writing JSON to `$output'\n");

# print tree in JSON format
my @stack = ({'boxbackup' => $roots });
my $stringbuf = '';
$stringbuf .= '[1,0,{"progname":"boxdu","progver":"0.1"},'."\n";

# create new progress bar 
unless ($quiet) {
    $progress = Term::ProgressBar->new({name => 'Processing', count => $joblength, ETA => 'linear'});
    $progress->minor(0);
}
$progress_nextupdate = 0;
my $progress_i = 0;

start('json') if $debug;
while (scalar(@stack)) {
    if (!$quiet && $progress_i >= $progress_nextupdate) {
        $progress_nextupdate = $progress->update($progress_i);
    }

    start('json_popget') if $debug;
    # take first hash ref from stack
    my $next = pop(@stack);

    # take first (any) key
    my ($key, undef) = each(%$next);
    end('json_popget') if $debug;

    if (!$key) {
        # Remove last comma from output
        # (Note: regexp are too slow for this)
        if (substr($stringbuf, -2) eq ",\n") {
            chop($stringbuf);
            chop($stringbuf);
        }

        # Flush output to reduce memory usage
        print $outputfh $stringbuf;
        $stringbuf = "],\n";
        next;
    }

    start('json_savedelpush') if $debug;
    # save children
    my $sub = $next->{$key};

    # delete key
    delete($next->{$key});

    # put hash ref back of stack
    push(@stack, $next);
    end('json_savedelpush') if $debug;

    # print key (sanitized for JSON)
    $key =~ s%(["\\])%\\$1%g;
    if (ref($sub) ne 'HASH') {
        # leaf found, print size
        $stringbuf .= '{"name":"'.$key.'","dsize":'.$sub.'},'."\n";
    } else {
        $stringbuf .= '[{"name":"'.$key.'"},'."\n";
        # put children on stack
        push(@stack, $sub);
    }

    $progress_i++;
}
end('json') if $debug;

unless ($quiet) {
    $progress->update($joblength);
    print("\n");
}

if ($debug) {
    print STDERR "Execution times:\n";
    for my $section (reverse sort { $times->{$a} <=> $times->{$b} } keys(%$times)) {
        printf("%.2f  %s\n", $times->{$section}, $section);
    }
}

# remove last comma from output
$stringbuf =~ s/,(\s*)$//;

print $outputfh $stringbuf;
close($outputfh);

if ($runncdu) {
    # Run ncdu
    my $ncdubin = defined($ENV{BOXDU_NCDU}) ? $ENV{BOXDU_NCDU} : '/usr/bin/ncdu';
    verbose("Using ncdu binary: $ncdubin\n");
    system($ncdubin, '-f', $output);
}

# The flags displayed in boxbackup's list command are as follows:
# f = file
# d = directory
# X = deleted
# o = old version
# R = remove from server as soon as marked deleted or old
# a = has attributes stored in directory record which override attributes in backup file (can't know what their real status is)
